// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id                     String               @id @default(uuid())
  name                   String
  username               String               @unique
  password               String
  leetcodeHandle         String               @unique

  totalSolved            Int                  @default(0)
  easySolved             Int                  @default(0)
  mediumSolved           Int                  @default(0)
  hardSolved             Int                  @default(0)
  ranking                Int                  @default(0)
  leetcodeLastUpdated    DateTime             @updatedAt

  solvedProblems         UserSolvedLeetcodeProblems[]
  levels                 Int                  @default(1)
  streaks                Int                  @default(0)
  xp                     Int                  @default(0)
  remainingLoginAttempts Int                  @default(5)

  activeAvatarId         String
  activeAvatar           Avatar               @relation(fields: [activeAvatarId], references: [id], onDelete: Cascade)
  activeBackgroundId     String
  activeBackground       Background           @relation(fields: [activeBackgroundId], references: [id], onDelete: Cascade)
  tokens                 Token[]
  avatarUnlocked         AvatarUnlocked[]
  backgroundUnlocked     BackgroundUnlocked[]
}

model LeetcodeProblem {
  id                   String                      @id @default(uuid())
  titleSlug            String                      @unique
  title                String
  difficulty           String
  solvedBy             UserSolvedLeetcodeProblems[] // THIS IS OPTIONAL
}

model UserSolvedLeetcodeProblems {
  id         String          @id @default(uuid())
  userId     String
  problemId  String
  completedAt DateTime       @default(now())
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem    LeetcodeProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Avatar {
    id                String           @id @default(uuid())
    name              String           @unique
    imageUrl          String
    unlockRequirement Int              @default(0)
    unlockedByUsers   AvatarUnlocked[]
    users             User[]
}

model Background {
    id                String               @id @default(uuid())
    name              String               @unique
    imageUrl          String
    unlockRequirement Int                  @default(0)
    unlockedByUsers   BackgroundUnlocked[]
    users             User[]
}

model AvatarUnlocked {
    userId   String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    avatarId String
    avatar   Avatar @relation(fields: [avatarId], references: [id], onDelete: Cascade)

    @@id([userId, avatarId])
}

model BackgroundUnlocked {
    userId       String
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    backgroundId String
    background   Background @relation(fields: [backgroundId], references: [id], onDelete: Cascade)

    @@id([userId, backgroundId])
}

model Token {
    id           String @id @default(uuid())
    accessToken  String @unique
    refreshToken String @unique
    userId       String
    user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
